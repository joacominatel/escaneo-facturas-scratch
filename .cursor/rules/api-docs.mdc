---
description: Flask API documentation for invoices
globs: 
alwaysApply: false
---
# API Documentation - Invoice Scanner App

This API allows managing the upload, processing, validation, and retrieval of scanned invoices using OCR and potentially AI for data extraction.

---

## Base URL

All API endpoints are relative to the application's base URL. For example, if your application is running at `http://localhost:5000`, the endpoints would be accessed like `http://localhost:5000/api/invoices/...`.

---

## Authentication

_(Note: Authentication details are not specified in the provided code snippets. Add relevant information here if authentication/authorization is implemented, e.g., API Keys, JWT Tokens, etc.)_

---

## Endpoints

---

### 1. Upload Invoices for Processing

`POST /api/invoices/ocr`

**Description:**
Uploads one or more invoice files (PDF, JPEG, PNG) for asynchronous processing. The system saves the file, creates an initial `Invoice` record with status `processing`, and queues a background task (Celery) to perform OCR and data extraction.

**Request:**
- **Content-Type:** `multipart/form-data`
- **Body:**
    - `file`: One or more files attached.

**Allowed File Types:** `application/pdf`, `image/jpeg`, `image/png`.

**Response (Success - 202 Accepted):**
Returns a list of results, one for each uploaded file, indicating whether it was accepted for processing, duplicated, or encountered an error during upload.

```json
[
  {
    "invoice_id": 1,
    "filename": "factura_nueva.pdf",
    "status": "processing",
    "message": "Invoice is being processed automatically"
  },
  {
    "invoice_id": null,
    "filename": "factura_repetida.pdf",
    "status": "duplicated",
    "message": "Invoice was already processed previously (detected by name)."
  },
  {
    "filename": "documento_invalido.txt",
    "status": "error",
    "message": "File type not allowed: text/plain. Allowed: application/pdf, image/jpeg, image/png"
  }
]
```

**Response (Error - 400 Bad Request):**
If no files are provided in the request.
```json
{
  "error": "No files found"
}
```

**Response (Error - 500 Internal Server Error):**
If there's an error saving records to the database during the initial processing stage.
```json
{
  "error": "An error occurred while processing some files in the database.",
  "details": [
    // List of results, some might show database errors
  ]
}
```

---

### 2. List Invoices

`GET /api/invoices/`

**Description:**
Retrieves a paginated list of invoices. Allows filtering by status, searching by filename, and sorting by various columns.

**Query Parameters:**
- `page` (integer, optional, default: 1): The page number to retrieve.
- `per_page` (integer, optional, default: 10, max: 100): Number of invoices per page.
- `status` (string, optional, multiple allowed): Filter by one or more invoice statuses (e.g., `status=processing&status=failed`). Valid statuses might include `processing`, `waiting_validation`, `processed`, `failed`, `rejected`, `duplicated`.
- `search` (string, optional): Search term to filter invoices by filename (case-insensitive).
- `sort_by` (string, optional, default: `created_at`): Column to sort by. Allowed columns are fields in the `Invoice` model (e.g., `id`, `filename`, `status`, `created_at`).
- `sort_order` (string, optional, default: `desc`): Sort order (`asc` or `desc`).

**Response (Success - 200 OK):**
Returns a paginated list of invoices matching the criteria.

```json
{
  "page": 1,
  "per_page": 10,
  "total": 53,
  "pages": 6,
  "invoices": [
    {
      "id": 15,
      "filename": "invoice_abc.pdf",
      "status": "processed",
      "created_at": "2024-07-28T15:30:00Z"
    },
    {
      "id": 14,
      "filename": "scan_xyz.png",
      "status": "waiting_validation",
      "created_at": "2024-07-28T14:20:15Z"
    }
    // ... more invoices
  ]
}
```

**Response (Error - 400 Bad Request):**
If `page` or `per_page` are not valid integers.
```json
{
  "error": "'page' and 'per_page' parameters must be integers."
}
```

**Response (Error - 500 Internal Server Error):**
If there's an error querying the database.
```json
{
  "error": "Error querying the database"
}
```

---

### 3. Get Invoice Details

`GET /api/invoices/<int:invoice_id>`

**Description:**
Retrieves detailed information for a specific invoice, including its status and extracted data (preview or final).

**Path Parameters:**
- `invoice_id` (integer, required): The ID of the invoice to retrieve.

**Response (Success - 200 OK):**
```json
{
  "invoice_id": 15,
  "status": "processed",
  "final_data": {
    "invoice_number": "INV-001",
    "amount_total": 150.75,
    "date": "2024-07-20",
    "bill_to": "Client Corp",
    "currency": "USD",
    // ... other extracted fields
  },
  "preview_data": {
     // Potentially slightly different data if preview/final differ
     "invoice_number": "INV-001",
     "amount_total": 150.75,
     // ...
  }
}
```
*(Note: `preview_data` might be populated during an intermediate validation step, while `final_data` holds the confirmed data).*

**Response (Error - 404 Not Found):**
If the invoice with the specified ID does not exist.
```json
{
  "error": "Invoice not found"
}
```

---

### 4. Confirm Invoice Data

`POST /api/invoices/<int:invoice_id>/confirm`

**Description:**
Confirms the data extracted for an invoice (likely from `preview_data`). This typically moves the data from `preview_data` to `final_data` and updates the invoice status to `processed`.

**Path Parameters:**
- `invoice_id` (integer, required): The ID of the invoice to confirm.

**Response (Success - 200 OK):**
```json
{
  "invoice_id": 15,
  "status": "processed",
  "message": "Invoice confirmed and finalized successfully."
}
```

**Response (Error - 404 Not Found):**
If the invoice with the specified ID does not exist.
```json
{
  "error": "Invoice not found"
}
```

**Response (Error - 400 Bad Request):**
If the invoice has no `preview_data` to confirm.
```json
{
  "error": "No preview data to confirm"
}
```

---

### 5. Reject Invoice

`POST /api/invoices/<int:invoice_id>/reject`

**Description:**
Manually rejects an invoice. This is typically used when the extracted data requires correction or the invoice is invalid.

**Path Parameters:**
- `invoice_id` (integer, required): The ID of the invoice to reject.

**Request Body (optional):**
- **Content-Type:** `application/json`
```json
{
  "reason": "Optional reason for rejection provided by the user."
}
```
If no reason is provided, a default message "Manual rejection by the user." is used.

**Response (Success - 200 OK):**
```json
{
  "invoice_id": 16,
  "status": "rejected",
  "message": "Invoice rejected successfully."
}
```

**Response (Error - 404 Not Found):**
If the invoice with the specified ID does not exist.
```json
{
  "error": "Invoice not found"
}
```

**Response (Error - 400 Bad Request):**
If the invoice is not in a state that allows rejection (e.g., already `processed` or `rejected`). The allowed statuses seem to be `waiting_validation`, `processing`, `failed`.
```json
{
  "error": "Cannot reject an invoice with status [current_status]"
}
```

---

### 6. Retry Invoice Processing

`POST /api/invoices/<int:invoice_id>/retry`

**Description:**
Requests a retry for an invoice that previously failed processing or was rejected. This sets the status back to `processing` and re-queues the background processing task.

**Path Parameters:**
- `invoice_id` (integer, required): The ID of the invoice to retry.

**Response (Success - 202 Accepted):**
Indicates the retry request was accepted and processing will begin shortly.
```json
{
  "invoice_id": 17,
  "status": "processing",
  "message": "Invoice sent back for processing."
}
```

**Response (Error - 404 Not Found):**
If the invoice with the specified ID does not exist.
```json
{
  "error": "Invoice not found"
}
```

**Response (Error - 400 Bad Request):**
If the invoice is not in a state that allows retrying (only `failed` or `rejected` allowed).
```json
{
  "error": "Only failed or rejected invoices can be retried. Current status: [current_status]"
}
```

---

### 7. Download Original Invoice File

`GET /api/invoices/<int:invoice_id>/download`

**Description:**
Downloads the original file associated with an invoice.

**Path Parameters:**
- `invoice_id` (integer, required): The ID of the invoice whose file to download.

**Response (Success - 200 OK):**
- **Content-Type:** The original MIME type of the uploaded file (e.g., `application/pdf`, `image/png`).
- **Content-Disposition:** `attachment; filename="[original_filename]"`
- **Body:** The raw binary content of the file.

**Response (Error - 404 Not Found):**
- If the invoice ID does not exist. (`description="Invoice not found."`)
- If the invoice record exists but the associated file is missing on the server. (`description="File not found on the server."`)

---

### 8. Get Invoice Status Summary

`GET /api/invoices/status-summary/`

**Description:**
Retrieves a summary count of invoices grouped by their current status.

**Response (Success - 200 OK):**
```json
{
  "summary": {
    "processing": 5,
    "waiting_validation": 2,
    "processed": 48,
    "failed": 1,
    "rejected": 3,
    "duplicated": 10
    // Only statuses with counts > 0 might be included
  }
}
```

---

### 9. Get Processed Invoice Data

`GET /api/invoices/data`

**Description:**
Retrieves detailed, structured data specifically from invoices that have been fully processed (status `processed`, data stored in `InvoiceData` model). Allows pagination and filtering by `op_number` found within the invoice items.

**Query Parameters:**
- `page` (integer, optional, default: 1): The page number to retrieve.
- `per_page` (integer, optional, default: 10): Number of processed invoice data entries per page.
- `op_number` (string, optional): Filter results to include only invoices containing this specific `op_number` (advertising number) within their items.

**Response (Success - 200 OK):**
Returns a paginated list of structured invoice data.

```json
{
  "page": 1,
  "per_page": 10,
  "total": 25, // Total matching the op_number filter if applied
  "invoices": [
    {
      "invoice_id": 15,
      "invoice_number": "FINV-2024-001",
      "amount_total": 1500.50,
      "date": "2024-07-15",
      "bill_to": "Customer A",
      "currency": "EUR",
      "payment_terms": "NET 30",
      "advertising_numbers": [ // Unique list aggregated from items
        "OP123",
        "OP456"
      ],
      "items": [
        {
          "description": "Service X",
          "amount": 1000.00,
          "advertising_numbers": ["OP123"]
        },
        {
          "description": "Service Y",
          "amount": 500.50,
          "advertising_numbers": ["OP456"]
        }
      ]
    }
    // ... more processed invoice data entries
  ]
}
```
*(Note: The `total` in the response reflects the count after filtering, if `op_number` is used).*


---